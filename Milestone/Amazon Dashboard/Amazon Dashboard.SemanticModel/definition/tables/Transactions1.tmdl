table Transactions1
	lineageTag: 2b1b96dd-c57e-487a-bbbc-98f3194da7d6

	measure 'Total Cost' = ```
			
			-SUMX(
			    Transactions1,
			    IF(Transactions1[Transaction Type] = "Order", 
			       Transactions1[Quantity Sold] * RELATED('Item cost price'[Cost price EUR]),
			       IF(Transactions1[Transaction Type] = "Refund", 
			          -Transactions1[Quantity Sold] * RELATED('Item cost price'[Cost price EUR]), 
			          0
			       )
			    )
			)-[Item Cost shopify]*Shopify[Shopify Value]
			
			```
		lineageTag: d48fa7a7-dfd2-4f69-b047-f7660d8e0461

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'Sales fees (Transport+Fulfillment)%' = DIVIDE(SUM(Transactions1[Sales fees(Transport+Fulfillment)]),[Total revenue],0)
		formatString: 0.00%;-0.00%;0.00%
		lineageTag: 395fb21f-57c9-43c2-9f08-860edd30050d

	measure 'Other Transaction Fees (Marketing)%' = DIVIDE(SUM(Transactions1[Other Transaction Fees1(Marketing)]),[Total revenue],0)
		formatString: 0.00%;-0.00%;0.00%
		lineageTag: 32b275e1-4a1e-4713-bddb-237d34ab2d88

	measure Profits = [Total revenue]+SUM(Transactions1[Sales fees(Transport+Fulfillment)])+[Total Cost]+[Marketing Costs] + [Sum of Miscellaneous]
		lineageTag: 8292f7ed-ba0b-4eb7-9868-5be40fb2395c

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure OrderCount = ```
			COUNTROWS(OrderSummaryTable)
			
			```
		formatString: 0.00
		lineageTag: dc60da9c-dc0d-41a7-b250-442c892d38fc

	measure 'Total cost %' = ```
			DIVIDE([Total Cost],[Total revenue],0) 
			```
		formatString: 0.00%;-0.00%;0.00%
		lineageTag: 46593ebb-a1e5-4ccc-9f68-fd6b31158749

	measure 'Profits %' = ```
			DIVIDE([Profits],[Total revenue],0) 
			```
		formatString: 0.00%;-0.00%;0.00%
		lineageTag: e55c6213-5a8b-4bf2-b0f8-506b02fc48d9

	measure 'Total revenue' = SUM(Transactions1[Transaction Revenues1])+SUM(Transactions1[Shipping Credits1])+SUM(Transactions1[Gift Wrap Credits1])+SUM(Transactions1[Promotion Discounts1])+SUM('Shopify Denmark'[net_sales])*Shopify[Shopify Value]
		lineageTag: d5cb72c0-bacf-4568-a5ed-b8c9f9fdc346

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'Quantity Sold (Negative/positive)' = ```
			
			SUMX(
			    FILTER(
			        Transactions1,
			        Transactions1[Transaction Type] = "Order"
			    ),
			    Transactions1[Quantity Sold]
			) - 
			SUMX(
			    FILTER(
			        Transactions1,
			        Transactions1[Transaction Type] = "Refund"
			    ),
			    Transactions1[Quantity Sold]
			)
			
			```
		formatString: 0
		lineageTag: ab30dfd1-0439-4e33-92bc-c8a0e1e08e2d

	measure 'Other transaction Fees (Marketing) - positive' = -SUM(Transactions1[Other Transaction Fees1(Marketing)])
		lineageTag: 729db519-d52c-48e3-9f68-85a58c6f64f4

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'Sales fees (Transport + Fulfillment) - positive' = -SUM(Transactions1[Sales fees(Transport+Fulfillment)])
		lineageTag: 547e1055-9286-4f7b-9835-3180f0fb8981

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'Revenue + Handling + Fulfillment' = [Total revenue]+[Marketing Costs]+ SUM(Transactions1[Sales fees(Transport+Fulfillment)])
		lineageTag: df573487-6141-4ef9-b989-c197155163ed

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'Refund number' = ```
			SUMX(FILTER(Transactions1, Transactions1[Transaction Type] = "Refund"), Transactions1[Quantity Sold])
			
			```
		formatString: 0
		lineageTag: 05c3adfc-8608-43a7-8070-9703be210d1b

	measure 'Quantity sold (type Order)' = SUMX(FILTER(Transactions1,Transactions1[Transaction Type]="Order"), Transactions1[Quantity Sold])+SUM('Shopify Denmark'[net_quantity])*Shopify[Shopify Value]
		formatString: 0.00
		lineageTag: d77ab3b1-b08b-4eec-922e-573ecf73da88

	measure 'Refunds %' = [Refund number]/[Quantity sold (type Order)]
		formatString: 0.00%;-0.00%;0.00%
		lineageTag: 923b1769-e389-4a49-a593-0a98f319d0fd

	measure 'Total Cost - positive' = -[Total Cost]
		lineageTag: 773a9f7b-e360-4a34-8f38-0236ebb92379

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'Sales fees (Transport+Fulfillment)% - positive' = -DIVIDE(SUM(Transactions1[Sales fees(Transport+Fulfillment)]),[Total revenue],0)
		formatString: 0.00%;-0.00%;0.00%
		lineageTag: 58a8bf1a-c310-49da-98bb-acc122a654bc

	measure ROAS = [Total revenue]/[Marketing Costs - positive]
		lineageTag: c8067b49-af48-4fb5-b974-55ff61369eca

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'Sum of Miscellaneous' = ```
			
			SUMX(FILTER(Transactions1,Transactions1[Transaction Type] <> "Transfer"),Transactions1[Miscellaneous1 (Withdrawals)]) 
			```
		lineageTag: eb337fd4-aa96-4d20-9250-bb6c725bd642

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'Basket Size' = ```
			AVERAGE(OrderSummaryTable[Total Revenue])
			
			```
		lineageTag: a8f43ec6-80f2-4d83-bef6-3141bebe45c7

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'Average Order Size' = AVERAGE(OrderSummaryTable[Order Size])
		lineageTag: b40848c8-37c2-4d05-b161-72e447751be1

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure '1 Item orders %' = ```
			
			DIVIDE(
			    COUNTX(
			        FILTER(OrderSummaryTable, OrderSummaryTable[Order Size] = 1),
			        OrderSummaryTable[Order ID]
			    ),
			    COUNTROWS(OrderSummaryTable)
			)
			
			```
		formatString: 0.00%;-0.00%;0.00%
		lineageTag: 3f8576f6-2a4f-47b5-8e8c-6d4f6a62c26d

	measure 'Miscellaneous cost %' = ```
			DIVIDE([Sum of Miscellaneous],[Total revenue],0) 
			```
		lineageTag: 383dc0ce-e4dc-4a60-bb8d-efc7e019bfcc

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure AverageQuantityPerMonth = ```
			
			VAR MonthsSinceFirstSale = 
			    DATEDIFF(
			        [FirstSaleDate],
			        MAX(DateTable[Date]),
			        MONTH
			    ) + 1
			RETURN
			   [Quantity Sold (Negative/Positive)] / MonthsSinceFirstSale
			    
			
			
			```
		lineageTag: 8cad9c00-a93a-42d5-81a8-01134419bcec

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure FirstSaleDate =
			
			MIN(Transactions1[Date])
		formatString: General Date
		lineageTag: fcbcb9c4-50ce-4bd3-8ea8-4127b08aa867

	measure ForecastedSalesNext2Months = ```
			
			VAR FirstSaleDate = MIN('DateTable'[Date])
			VAR LastDate1 = MAX('DateTable'[Date])
			VAR LastAvailableMonth = EOMONTH(LastDate1, 0)
			
			RETURN
			CALCULATE(
			    [Quantity Sold (Negative/Positive)],
			    'DateTable'[Date] >= LastAvailableMonth + 1 &&
			    'DateTable'[Date] <= LastAvailableMonth + 2
			)
			
			```
		formatString: 0
		lineageTag: d0ad0a6c-abc2-4fb2-90c7-463b59128693

	measure OrderCount1 = ```
			DISTINCTCOUNT(Transactions1[Order ID])+SUM('Shopify Denmark'[net_quantity])*Shopify[Shopify Value]
			
			```
		formatString: 0.00
		lineageTag: f6b41a7d-5b16-416d-9e2b-886cc3a42b72

	measure 'Average OrderSize 1' = ```
			AVERAGEX(SUMMARIZE(Transactions1, Transactions1[Order ID], "TotalQuantity", SUM(Transactions1[Quantity Sold])), [TotalQuantity])
			
			```
		lineageTag: cc5d0f74-08ec-4fd3-a754-69e811a34199

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure Basketsize1 = [Total revenue]/[OrderCount1]
		lineageTag: 36e9eee0-65de-4d67-92ec-6f8063184e67

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure SingleItemOrdersCount = ```
			
			CALCULATE(
			    COUNTROWS(
			        FILTER(
			            VALUES(Transactions1[Order ID]),
			            CALCULATE(
			                COUNTROWS(Transactions1),
			                Transactions1[Transaction Type] = "Order"
			            ) = 1
			        )
			    )
			)
			
			```
		formatString: 0
		lineageTag: ffeb4923-d700-4032-b568-743c705bb718

	measure AverageQuantityLast3MonthsBeforeLatestDate = ```
			
			VAR LatestDate = MAX(DateTable[Date])
			VAR StartDate = LatestDate - 90
			RETURN
			DIVIDE(
			    CALCULATE(
			        [Quantity Sold (Negative/Positive)],
			        FILTER(
			            ALL(DateTable),
			            DateTable[Date] >= StartDate &&
			            DateTable[Date] < LatestDate
			        )
			    ),
			    3
			)
			
			```
		lineageTag: a0f75559-379d-4208-af56-b1a8b50f64bf

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'Stock for 2 more months' = ([AverageQuantityLast3MonthsBeforeLatestDate]*2)
		lineageTag: 3de7e242-5460-4a9b-ae13-32251aeb0a32

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'Stock replenishment' = -IF(SUM('Amazon Restock Report CSV'[Available])<[Stock for 2 more months],SUM('Amazon Restock Report CSV'[Available])-[Stock for 2 more months], 0)
		lineageTag: 3d14cdac-f7c4-4156-9129-f78a58402ae2

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'Discounts count' = COUNTROWS(FILTER(Transactions1,Transactions1[Promotion Discounts1]<>0))
		formatString: 0
		lineageTag: f5d6e461-2918-4e81-8c4c-608b986ae893

	measure 'Discounts count %' = DIVIDE([Discounts count],[OrderCount1],0)
		formatString: 0%;-0%;0%
		lineageTag: 68d0fbeb-6ee1-4610-b2ad-cf370754f427

	measure 'Discounts as % of the price' = -DIVIDE(SUM(Transactions1[Promotion Discounts1]), [Total revenue],0)
		formatString: 0.00%;-0.00%;0.00%
		lineageTag: acbda3ee-cf3b-4c09-b720-a24b608d0ca4

	measure 'Quantity Sold in Last 30 Days' = ```
			
			CALCULATE (
			    [Quantity Sold (Negative/positive)],
			    DateTable[Date] >= (MAX(DateTable[Date]) - 30) && DateTable[Date] < MAX(DateTable[Date])   
			)
			
			```
		formatString: 0
		lineageTag: c2363682-67be-42fb-8d98-5375e4346098

	measure 'Average factor last 30 days' =
			
			(
			(30-DATEDIFF(DATE(YEAR(TODAY()),MONTH(TODAY()),1),MAX(DateTable[Date]),DAY))*
			CALCULATE('Amazon factors'[Factor % measure], 'Amazon factors'[Month number]=(MONTH(TODAY())-1))+
			(DATEDIFF(DATE(YEAR(TODAY()),MONTH(TODAY()),1),MAX(DateTable[Date]),DAY))*
			CALCULATE('Amazon factors'[Factor % measure], 'Amazon factors'[Month number]=MONTH(TODAY()))
			)/30
		formatString: 0.00%;-0.00%;0.00%
		lineageTag: 3d8b345e-c499-4c5e-a375-372313a64bb9

	measure 'Average quantity last 30 days at average factor' = [Quantity Sold in Last 30 Days] * [Average factor last 30 days]
		lineageTag: 6b4ee28c-9812-4089-a3ea-b83f242d2d17

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	measure 'Measure 2'
		lineageTag: 14b3bb48-1176-485d-a309-e4943acea107

		annotation 43dbc3e8-3a1c-4b6f-9923-b49ff7d6691c = True

	column Index
		dataType: int64
		formatString: 0
		lineageTag: b5c781c3-43a8-4e6c-87f7-f1d4bdef8528
		summarizeBy: sum
		sourceColumn: Index

		annotation SummarizationSetBy = Automatic

	column 'Transaction Date/Time'
		dataType: string
		lineageTag: 01d39e4c-ab0e-4de1-b613-ec3e56414268
		summarizeBy: none
		sourceColumn: Transaction Date/Time

		annotation SummarizationSetBy = Automatic

	column Date
		dataType: dateTime
		formatString: Long Date
		lineageTag: 8fae4326-d71a-415d-839f-6dbfc9fd3836
		summarizeBy: none
		sourceColumn: Date

		annotation SummarizationSetBy = Automatic

		annotation UnderlyingDateTimeDataType = Date

	column 'Invoice Number'
		dataType: int64
		formatString: 0
		lineageTag: 3883ac0c-f612-469a-aace-2a31547a7d92
		summarizeBy: sum
		sourceColumn: Invoice Number

		annotation SummarizationSetBy = Automatic

	column 'Transaction Type'
		dataType: string
		lineageTag: f1a05166-bb9f-4bcd-98eb-c18f524625fc
		summarizeBy: none
		sourceColumn: Transaction Type

		annotation SummarizationSetBy = Automatic

	column 'Order ID'
		dataType: string
		lineageTag: 1c60ae32-296b-4b91-bc6d-d3d41492950f
		summarizeBy: none
		sourceColumn: Order ID

		annotation SummarizationSetBy = Automatic

	column 'Product SKU'
		dataType: string
		lineageTag: 60a6df0b-7565-4ef8-961b-a3e45a6a5be1
		summarizeBy: none
		sourceColumn: Product SKU

		annotation SummarizationSetBy = Automatic

	column 'Product SKU final'
		dataType: string
		lineageTag: 066218d6-9c2f-4b65-99db-a0d722c42ac8
		summarizeBy: none
		sourceColumn: Product SKU final

		annotation SummarizationSetBy = Automatic

	column ASIN
		dataType: string
		lineageTag: ad4eab7a-af80-4d03-a84c-a3166c8ca904
		summarizeBy: none
		sourceColumn: ASIN

		annotation SummarizationSetBy = Automatic

	column 'Item translator.Amazon'
		dataType: string
		lineageTag: cd7dd6bb-7889-41c5-85cf-1c7a37398148
		summarizeBy: none
		sourceColumn: Item translator.Amazon

		annotation SummarizationSetBy = Automatic

	column 'Parent SKU'
		dataType: string
		lineageTag: b66fb2c3-6874-4882-acb4-1ac36c173ed5
		summarizeBy: none
		sourceColumn: Parent SKU

		annotation SummarizationSetBy = Automatic

	column 'Product Description'
		dataType: string
		lineageTag: d02d0cf0-ac4e-44a5-903a-443cc398c63d
		summarizeBy: none
		sourceColumn: Product Description

		annotation SummarizationSetBy = Automatic

	column 'Quantity Sold'
		dataType: int64
		formatString: #,0
		lineageTag: 3aa9c804-ddb8-49cd-a163-026a85e55d5e
		summarizeBy: sum
		sourceColumn: Quantity Sold

		annotation SummarizationSetBy = Automatic

	column 'Transaction Marketplace'
		dataType: string
		lineageTag: 45474cd8-401f-4c73-9206-468203cd0df0
		summarizeBy: none
		sourceColumn: Transaction Marketplace

		annotation SummarizationSetBy = Automatic

	column 'Shipping Cost'
		dataType: string
		lineageTag: 30d7fb20-5cde-4307-817a-1ee52e496f08
		summarizeBy: none
		sourceColumn: Shipping Cost

		annotation SummarizationSetBy = Automatic

	column 'Order Location'
		dataType: string
		lineageTag: e7531b8a-a9f8-474b-a304-eecbe861725c
		summarizeBy: none
		sourceColumn: Order Location

		annotation SummarizationSetBy = Automatic

	column State
		dataType: string
		lineageTag: 8c6ca95d-9dc1-4249-b22e-4efd6ea8963b
		summarizeBy: none
		sourceColumn: State

		annotation SummarizationSetBy = Automatic

	column 'Postal Code'
		dataType: string
		lineageTag: 5dc36ab9-d968-46a1-9442-9b85bdcc2656
		summarizeBy: none
		sourceColumn: Postal Code

		annotation SummarizationSetBy = Automatic

	column 'Tax Collection Model'
		dataType: string
		lineageTag: bbe32928-03b9-4783-9df8-12809684a50a
		summarizeBy: none
		sourceColumn: Tax Collection Model

		annotation SummarizationSetBy = Automatic

	column %VAT
		dataType: int64
		formatString: 0
		lineageTag: d57c73f6-bc8d-4272-b0ec-643ef8fe9374
		summarizeBy: sum
		sourceColumn: %VAT

		annotation SummarizationSetBy = Automatic

	column 'Transaction Revenues1'
		dataType: double
		lineageTag: 9167701b-1183-4fcb-9a08-61facf0b8b2e
		summarizeBy: sum
		sourceColumn: Transaction Revenues1

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'Collected VAT1'
		dataType: double
		lineageTag: 076e2e23-1eca-4db5-b6c9-74434ba68304
		summarizeBy: sum
		sourceColumn: Collected VAT1

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'Shipping Credits1'
		dataType: double
		lineageTag: 14aa4c35-77b1-4f5f-93bc-6bfbcaba8f27
		summarizeBy: sum
		sourceColumn: Shipping Credits1

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'Tax on Shipping Credits1'
		dataType: double
		lineageTag: 8afb6f40-ed38-4e23-98fc-f0031dd6e9b1
		summarizeBy: sum
		sourceColumn: Tax on Shipping Credits1

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'Gift Wrap Credits1'
		dataType: double
		lineageTag: 70aff0c5-4650-4bf0-9501-983c61d6e0f7
		summarizeBy: sum
		sourceColumn: Gift Wrap Credits1

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'Tax on Gift Wrap Credits1'
		dataType: double
		lineageTag: 85ebff9b-f4a3-479d-8e97-523446947523
		summarizeBy: sum
		sourceColumn: Tax on Gift Wrap Credits1

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'Promotion Discounts1'
		dataType: double
		lineageTag: fc589e7e-d499-448a-b993-575b72e43ab9
		summarizeBy: sum
		sourceColumn: Promotion Discounts1

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'Tax on Promotion Discounts1'
		dataType: double
		lineageTag: a4be53b0-920d-4ec6-a3dc-8e86b0b69927
		summarizeBy: sum
		sourceColumn: Tax on Promotion Discounts1

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'Withheld Marketplace Tax1'
		dataType: double
		lineageTag: 81039038-a121-4d57-a0a2-95e91a0ae7fe
		summarizeBy: sum
		sourceColumn: Withheld Marketplace Tax1

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'Sales Fees1(Transport)'
		dataType: double
		lineageTag: 4b2a81d0-419b-492f-be91-baae9d41bedf
		summarizeBy: sum
		sourceColumn: Sales Fees1(Transport)

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'Fulfillment Fees1'
		dataType: double
		lineageTag: fa8ad094-fc9e-41f6-9aa9-a43fc572b7d4
		summarizeBy: sum
		sourceColumn: Fulfillment Fees1

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'Sales fees(Transport+Fulfillment)'
		dataType: double
		lineageTag: 1078f10c-a646-47ea-9a9c-647d5e8427dd
		summarizeBy: sum
		sourceColumn: Sales fees(Transport+Fulfillment)

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'Other Transaction Fees1(Marketing)'
		dataType: double
		lineageTag: 0bd10747-00b6-44d9-a55a-634191665976
		summarizeBy: sum
		sourceColumn: Other Transaction Fees1(Marketing)

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'Miscellaneous1 (Withdrawals)'
		dataType: double
		lineageTag: d8dcfce1-a6ca-4966-b7e3-a24192dd6fe0
		summarizeBy: sum
		sourceColumn: Miscellaneous1 (Withdrawals)

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	column 'Total Amount1'
		dataType: double
		lineageTag: 1cf7bfd5-e785-4220-9359-38f81896a1a0
		summarizeBy: sum
		sourceColumn: Total Amount1

		annotation SummarizationSetBy = Automatic

		annotation PBI_FormatHint = {"isGeneralNumber":true}

	partition Transactions1 = m
		mode: import
		source = ```
				let
				    Source = SharePoint.Files("https://contrastcompany.sharepoint.com/sites/Milestone615", [ApiVersion = 15]),
				    #"2023Jun3-2023Aug30CustomTransaction.csv_https://contrastcompany.sharepoint.com/sites/Milestone615/Delte dokumenter/General/Amazon Power BI data source/" = Source{[Name="2023Jun3-2023Aug30CustomTransaction.csv",#"Folder Path"="https://contrastcompany.sharepoint.com/sites/Milestone615/Delte dokumenter/General/Amazon Power BI data source/"]}[Content],
				    #"Imported CSV" = Csv.Document(#"2023Jun3-2023Aug30CustomTransaction.csv_https://contrastcompany.sharepoint.com/sites/Milestone615/Delte dokumenter/General/Amazon Power BI data source/",[Delimiter=";", Columns=27, Encoding=65001, QuoteStyle=QuoteStyle.None]),
				    #"Changed Type" = Table.TransformColumnTypes(#"Imported CSV",{{"Column1", type text}, {"Column2", type text}, {"Column3", type text}, {"Column4", type text}, {"Column5", type text}, {"Column6", type text}, {"Column7", type text}, {"Column8", type text}, {"Column9", type text}, {"Column10", type text}, {"Column11", type text}, {"Column12", type text}, {"Column13", type text}, {"Column14", type text}, {"Column15", type text}, {"Column16", type text}, {"Column17", type text}, {"Column18", type text}, {"Column19", type text}, {"Column20", type text}, {"Column21", type text}, {"Column22", type text}, {"Column23", type text}, {"Column24", type text}, {"Column25", type text}, {"Column26", type text}, {"Column27", type text}}),
				    #"Removed Top Rows" = Table.Skip(#"Changed Type",7),
				    #"Promoted Headers" = Table.PromoteHeaders(#"Removed Top Rows", [PromoteAllScalars=true]),
				    #"Replaced Value14" = Table.ReplaceValue(#"Promoted Headers","M-211350001","M-21135-10-M-SC",Replacer.ReplaceText,{"SKU"}),
				    #"Replaced Value15" = Table.ReplaceValue(#"Replaced Value14","M-211350002","M-21135-10-L-SC",Replacer.ReplaceText,{"SKU"}),
				    #"Replaced Value16" = Table.ReplaceValue(#"Replaced Value15","M-211350003","M-21135-10-XL-SC",Replacer.ReplaceText,{"SKU"}),
				    #"Replaced Value17" = Table.ReplaceValue(#"Replaced Value16","M-211350004","M-21135-10-XXL-SC",Replacer.ReplaceText,{"SKU"}),
				    #"Replaced Value18" = Table.ReplaceValue(#"Replaced Value17","M-211350005","M-21135-11-M-WE",Replacer.ReplaceText,{"SKU"}),
				    #"Replaced Value19" = Table.ReplaceValue(#"Replaced Value18","M-211350006","M-21135-11-L-WE",Replacer.ReplaceText,{"SKU"}),
				    #"Replaced Value20" = Table.ReplaceValue(#"Replaced Value19","M-211350007","M-21135-11-XL-WE",Replacer.ReplaceText,{"SKU"}),
				    #"Replaced Value21" = Table.ReplaceValue(#"Replaced Value20","M-211350008","M-21135-11-XXL-WE",Replacer.ReplaceText,{"SKU"}),
				    #"Replaced Value22" = Table.ReplaceValue(#"Replaced Value21","M-211350009","M-21135-14-M-NV",Replacer.ReplaceText,{"SKU"}),
				    #"Replaced Value23" = Table.ReplaceValue(#"Replaced Value22","M-211350010","M-21135-14-L-NV",Replacer.ReplaceText,{"SKU"}),
				    #"Replaced Value24" = Table.ReplaceValue(#"Replaced Value23","M-211350011","M-21135-14-XL-NV",Replacer.ReplaceText,{"SKU"}),
				    #"Replaced Value25" = Table.ReplaceValue(#"Replaced Value24","M-211350012","M-21135-14-XXL-NV",Replacer.ReplaceText,{"SKU"}),
				    #"Headers Name Change" = Table.RenameColumns(
				    #"Replaced Value25",
				    {
				        {"Datum/Uhrzeit", "Transaction Date/Time"},
				        {"Abrechnungsnummer", "Invoice Number"},
				        {"Typ", "Transaction Type"},
				        {"Bestellnummer", "Order ID"},
				        {"SKU", "Product SKU"},
				        {"Beschreibung", "Product Description"},
				        {"Menge", "Quantity Sold"},
				        {"Marketplace", "Transaction Marketplace"},
				        {"Versand", "Shipping Cost"},
				        {"Ort der Bestellung", "Order Location"},
				        {"Bundesland", "State"},
				        {"Postleitzahl", "Postal Code"},
				        {"Steuererhebungsmodell", "Tax Collection Model"},
				        {"Umsätze", "Transaction Revenues"},
				        {"Produktumsatzsteuer", "Collected VAT"},
				        {"Gutschrift für Versandkosten", "Shipping Credits"},
				        {"Steuer auf Versandgutschrift", "Tax on Shipping Credits"},
				        {"Gutschrift für Geschenkverpackung", "Gift Wrap Credits"},
				        {"Steuer auf Geschenkverpackungsgutschriften", "Tax on Gift Wrap Credits"},
				        {"Rabatte aus Werbeaktionen", "Promotion Discounts"},
				        {"Steuer auf Aktionsrabatte", "Tax on Promotion Discounts"},
				        {"Einbehaltene Steuer auf Marketplace", "Withheld Marketplace Tax"},
				        {"Verkaufsgebühren", "Sales Fees"},
				        {"Gebühren zu Versand durch Amazon", "Fulfillment Fees"},
				        {"Andere Transaktionsgebühren", "Other Transaction Fees"},
				        {"Andere", "Miscellaneous"},
				        {"Gesamt", "Total Amount"}
				    }),
				    #"Added Miscellaneous1" = Table.AddColumn(#"Headers Name Change", "Miscellaneous1", each let splitMiscellaneous = List.Reverse(Splitter.SplitTextByDelimiter(".", QuoteStyle.None)([Miscellaneous])), splitsplitMiscellaneous0 = Splitter.SplitTextByDelimiter(",", QuoteStyle.None)(splitMiscellaneous{0}?) in Text.Combine({Text.Reverse(Text.Middle(Text.Reverse([Miscellaneous]), 7)), Text.Combine(splitsplitMiscellaneous0, ".")}), type text),
				    #"Changed Type1" = Table.TransformColumnTypes(#"Added Miscellaneous1",{{"Miscellaneous1", type number}}),
				    #"Added Total Amount1" = Table.AddColumn(#"Changed Type1", "Total Amount1", each 
				    let
				        totalAmountText = [Total Amount] as text,
				        splitTotalAmount = List.Reverse(Splitter.SplitTextByDelimiter(".", QuoteStyle.None)(totalAmountText)),
				        splitSplitTotalAmount0 = Splitter.SplitTextByDelimiter(",", QuoteStyle.None)(splitTotalAmount{0}?)
				    in
				        Text.Combine({Text.Reverse(Text.Middle(Text.Reverse(totalAmountText), 7)), Text.Combine(splitSplitTotalAmount0, ".")}), 
				    type text),
				    #"Added Other Transaction Fees1" = Table.AddColumn(#"Added Total Amount1", "Other Transaction Fees1", each
				    let
				        feesText = [Other Transaction Fees] as text,
				        splitFees = List.Reverse(Splitter.SplitTextByDelimiter(".", QuoteStyle.None)(feesText)),
				        splitSplitFees0 = Splitter.SplitTextByDelimiter(",", QuoteStyle.None)(splitFees{0}?)
				    in
				        Text.Combine({Text.Reverse(Text.Middle(Text.Reverse(feesText), 7)), Text.Combine(splitSplitFees0, ".")}),
				    type text),
				    #"Added Fulfillment Fees1" = Table.AddColumn(#"Added Other Transaction Fees1", "Fulfillment Fees1", each
				    let
				        feesText = [Fulfillment Fees] as text,
				        splitFees = List.Reverse(Splitter.SplitTextByDelimiter(".", QuoteStyle.None)(feesText)),
				        splitSplitFees0 = Splitter.SplitTextByDelimiter(",", QuoteStyle.None)(splitFees{0}?)
				    in
				        Text.Combine({Text.Reverse(Text.Middle(Text.Reverse(feesText), 7)), Text.Combine(splitSplitFees0, ".")}),
				    type text),
				    #"Added Sales Fees1" = Table.AddColumn(#"Added Fulfillment Fees1", "Sales Fees1", each
				    let
				        feesText = [Sales Fees] as text,
				        splitFees = List.Reverse(Splitter.SplitTextByDelimiter(".", QuoteStyle.None)(feesText)),
				        splitSplitFees0 = Splitter.SplitTextByDelimiter(",", QuoteStyle.None)(splitFees{0}?)
				    in
				        Text.Combine({Text.Reverse(Text.Middle(Text.Reverse(feesText), 7)), Text.Combine(splitSplitFees0, ".")}),
				    type text),
				    #"Added Withheld Marketplace Tax1" = Table.AddColumn(#"Added Sales Fees1", "Withheld Marketplace Tax1", each
				    let
				        taxText = [Withheld Marketplace Tax] as text,
				        splitTax = List.Reverse(Splitter.SplitTextByDelimiter(".", QuoteStyle.None)(taxText)),
				        splitSplitTax0 = Splitter.SplitTextByDelimiter(",", QuoteStyle.None)(splitTax{0}?)
				    in
				        Text.Combine({Text.Reverse(Text.Middle(Text.Reverse(taxText), 7)), Text.Combine(splitSplitTax0, ".")}),
				    type text),
				    #"Added Tax on Promotion Discounts" = Table.AddColumn(#"Added Withheld Marketplace Tax1", "Tax on Promotion Discounts1", each
				    let
				        taxText = [Tax on Promotion Discounts] as text,
				        splitTax = List.Reverse(Splitter.SplitTextByDelimiter(".", QuoteStyle.None)(taxText)),
				        splitSplitTax0 = Splitter.SplitTextByDelimiter(",", QuoteStyle.None)(splitTax{0}?)
				    in
				        Text.Combine({Text.Reverse(Text.Middle(Text.Reverse(taxText), 7)), Text.Combine(splitSplitTax0, ".")}),
				    type text),
				    #"Added Promotion Discounts1" = Table.AddColumn(#"Added Tax on Promotion Discounts", "Promotion Discounts1", each
				    let
				        discountsText = [Promotion Discounts] as text,
				        splitDiscounts = List.Reverse(Splitter.SplitTextByDelimiter(".", QuoteStyle.None)(discountsText)),
				        splitSplitDiscounts0 = Splitter.SplitTextByDelimiter(",", QuoteStyle.None)(splitDiscounts{0}?)
				    in
				        Text.Combine({Text.Reverse(Text.Middle(Text.Reverse(discountsText), 7)), Text.Combine(splitSplitDiscounts0, ".")}),
				    type text),
				    #"Added Tax on Gift Wrap Credits1" = Table.AddColumn(#"Added Promotion Discounts1", "Tax on Gift Wrap Credits1", each
				    let
				        taxText = [Tax on Gift Wrap Credits] as text,
				        splitTax = List.Reverse(Splitter.SplitTextByDelimiter(".", QuoteStyle.None)(taxText)),
				        splitSplitTax0 = Splitter.SplitTextByDelimiter(",", QuoteStyle.None)(splitTax{0}?)
				    in
				        Text.Combine({Text.Reverse(Text.Middle(Text.Reverse(taxText), 7)), Text.Combine(splitSplitTax0, ".")}),
				    type text),
				    #"Added Gift Wrap Credits1" = Table.AddColumn(#"Added Tax on Gift Wrap Credits1", "Gift Wrap Credits1", each
				    let
				        creditsText = [Gift Wrap Credits] as text,
				        splitCredits = List.Reverse(Splitter.SplitTextByDelimiter(".", QuoteStyle.None)(creditsText)),
				        splitSplitCredits0 = Splitter.SplitTextByDelimiter(",", QuoteStyle.None)(splitCredits{0}?)
				    in
				        Text.Combine({Text.Reverse(Text.Middle(Text.Reverse(creditsText), 7)), Text.Combine(splitSplitCredits0, ".")}),
				    type text),
				    #"Added Tax on Shipping Credits1" = Table.AddColumn(#"Added Gift Wrap Credits1", "Tax on Shipping Credits1", each
				    let
				        taxText = [Tax on Shipping Credits] as text,
				        splitTax = List.Reverse(Splitter.SplitTextByDelimiter(".", QuoteStyle.None)(taxText)),
				        splitSplitTax0 = Splitter.SplitTextByDelimiter(",", QuoteStyle.None)(splitTax{0}?)
				    in
				        Text.Combine({Text.Reverse(Text.Middle(Text.Reverse(taxText), 7)), Text.Combine(splitSplitTax0, ".")}),
				    type text),
				    #"Added Shipping Credits1" = Table.AddColumn(#"Added Tax on Shipping Credits1", "Shipping Credits1", each
				    let
				        creditsText = [Shipping Credits] as text,
				        splitCredits = List.Reverse(Splitter.SplitTextByDelimiter(".", QuoteStyle.None)(creditsText)),
				        splitSplitCredits0 = Splitter.SplitTextByDelimiter(",", QuoteStyle.None)(splitCredits{0}?)
				    in
				        Text.Combine({Text.Reverse(Text.Middle(Text.Reverse(creditsText), 7)), Text.Combine(splitSplitCredits0, ".")}),
				    type text),
				    #"Added Collected VAT1" = Table.AddColumn(#"Added Shipping Credits1", "Collected VAT1", each
				    let
				        vatText = [Collected VAT] as text,
				        splitVAT = List.Reverse(Splitter.SplitTextByDelimiter(".", QuoteStyle.None)(vatText)),
				        splitSplitVAT0 = Splitter.SplitTextByDelimiter(",", QuoteStyle.None)(splitVAT{0}?)
				    in
				        Text.Combine({Text.Reverse(Text.Middle(Text.Reverse(vatText), 7)), Text.Combine(splitSplitVAT0, ".")}),
				    type text),
				    #"Added Transaction Revenues1" = Table.AddColumn(#"Added Collected VAT1", "Transaction Revenues1", each
				    let
				        revenuesText = [Transaction Revenues] as text,
				        splitRevenues = List.Reverse(Splitter.SplitTextByDelimiter(".", QuoteStyle.None)(revenuesText)),
				        splitSplitRevenues0 = Splitter.SplitTextByDelimiter(",", QuoteStyle.None)(splitRevenues{0}?)
				    in
				        Text.Combine({Text.Reverse(Text.Middle(Text.Reverse(revenuesText), 7)), Text.Combine(splitSplitRevenues0, ".")}),
				    type text),
				    #"Changed Type2" = Table.TransformColumnTypes(#"Added Transaction Revenues1",{{"Quantity Sold", Int64.Type}, {"Invoice Number", Int64.Type}}),
				    #"Added Custom Column" = Table.AddColumn(#"Changed Type2", "Date", each Text.Combine({Text.Middle([#"Transaction Date/Time"], 6, 4), "-", Text.Middle([#"Transaction Date/Time"], 3, 2), "-", Text.Start([#"Transaction Date/Time"], 2)}), type text),
				    #"Changed Type4" = Table.TransformColumnTypes(#"Added Custom Column",{{"Date", type date}}),
				    #"Reordered Columns" = Table.ReorderColumns(#"Changed Type4",{"Transaction Date/Time", "Date", "Invoice Number", "Transaction Type", "Order ID", "Product SKU", "Product Description", "Quantity Sold", "Transaction Marketplace", "Shipping Cost", "Order Location", "State", "Postal Code", "Tax Collection Model", "Transaction Revenues", "Collected VAT", "Shipping Credits", "Tax on Shipping Credits", "Gift Wrap Credits", "Tax on Gift Wrap Credits", "Promotion Discounts", "Tax on Promotion Discounts", "Withheld Marketplace Tax", "Sales Fees", "Fulfillment Fees", "Other Transaction Fees", "Miscellaneous", "Total Amount", "Transaction Revenues1", "Collected VAT1", "Shipping Credits1", "Tax on Shipping Credits1", "Gift Wrap Credits1", "Tax on Gift Wrap Credits1", "Promotion Discounts1", "Tax on Promotion Discounts1", "Withheld Marketplace Tax1", "Sales Fees1",  "Fulfillment Fees1", "Other Transaction Fees1", "Miscellaneous1", "Total Amount1"}),
				    #"Changed Type3" = Table.TransformColumnTypes(#"Reordered Columns",{{"Total Amount1", type number}, {"Other Transaction Fees1", type number}, {"Fulfillment Fees1", type number}, {"Sales Fees1", type number}, {"Withheld Marketplace Tax1", type number}, {"Tax on Promotion Discounts1", type number}, {"Promotion Discounts1", type number}, {"Tax on Gift Wrap Credits1", type number}, {"Gift Wrap Credits1", type number}, {"Tax on Shipping Credits1", type number}, {"Shipping Credits1", type number}, {"Collected VAT1", type number}, {"Transaction Revenues1", type number}}),
				    #"Added SKU Column" = Table.AddColumn(#"Changed Type3", "SKU", each let splitProductSKU = Splitter.SplitTextByDelimiter("-", QuoteStyle.None)([Product SKU]) in Text.Combine({Text.Start([Product SKU], 5), Text.Middle(splitProductSKU{1}?, 3, 2), Text.Middle(splitProductSKU{0}?, 5)}), type text),
				    #"Reordered Columns1" = Table.ReorderColumns(#"Added SKU Column",{"Transaction Date/Time", "Date", "Invoice Number", "Transaction Type", "Order ID", "Product SKU", "SKU", "Product Description", "Quantity Sold", "Transaction Marketplace", "Shipping Cost", "Order Location", "State", "Postal Code", "Tax Collection Model", "Transaction Revenues", "Collected VAT", "Shipping Credits", "Tax on Shipping Credits", "Gift Wrap Credits", "Tax on Gift Wrap Credits", "Promotion Discounts", "Tax on Promotion Discounts", "Withheld Marketplace Tax", "Sales Fees", "Fulfillment Fees", "Other Transaction Fees", "Miscellaneous", "Total Amount", "Transaction Revenues1", "Collected VAT1", "Shipping Credits1", "Tax on Shipping Credits1", "Gift Wrap Credits1", "Tax on Gift Wrap Credits1", "Promotion Discounts1", "Tax on Promotion Discounts1", "Withheld Marketplace Tax1", "Sales Fees1", "Fulfillment Fees1", "Other Transaction Fees1", "Miscellaneous1", "Total Amount1"}),
				    #"Removed Columns" = Table.RemoveColumns(#"Reordered Columns1",{"Transaction Revenues", "Collected VAT", "Shipping Credits", "Tax on Shipping Credits"}),
				    #"Added Conditional Column" = Table.AddColumn(#"Removed Columns", "SKU1", each if [SKU] = "M21306" then "M-21306" else if [SKU] = "21306" then "M-21306" else [SKU], type text),
				    #"Reordered Columns2" = Table.ReorderColumns(#"Added Conditional Column",{"Transaction Date/Time", "Date", "Invoice Number", "Transaction Type", "Order ID", "Product SKU", "SKU", "SKU1", "Product Description", "Quantity Sold", "Transaction Marketplace", "Shipping Cost", "Order Location", "State", "Postal Code", "Tax Collection Model", "Gift Wrap Credits", "Tax on Gift Wrap Credits", "Promotion Discounts", "Tax on Promotion Discounts", "Withheld Marketplace Tax", "Sales Fees", "Fulfillment Fees", "Other Transaction Fees", "Miscellaneous", "Total Amount", "Transaction Revenues1", "Collected VAT1", "Shipping Credits1", "Tax on Shipping Credits1", "Gift Wrap Credits1", "Tax on Gift Wrap Credits1", "Promotion Discounts1", "Tax on Promotion Discounts1", "Withheld Marketplace Tax1", "Sales Fees1", "Fulfillment Fees1", "Other Transaction Fees1", "Miscellaneous1", "Total Amount1"}),
				    #"Added Custom" = Table.AddColumn(#"Reordered Columns2", "ASIN", each if Text.Length([SKU1]) = 10 then [SKU1] else null),
				    #"Reordered Columns3" = Table.ReorderColumns(#"Added Custom",{"Transaction Date/Time", "Date", "Invoice Number", "Transaction Type", "Order ID", "Product SKU", "SKU", "SKU1", "ASIN", "Product Description", "Quantity Sold", "Transaction Marketplace", "Shipping Cost", "Order Location", "State", "Postal Code", "Tax Collection Model", "Gift Wrap Credits", "Tax on Gift Wrap Credits", "Promotion Discounts", "Tax on Promotion Discounts", "Withheld Marketplace Tax", "Sales Fees", "Fulfillment Fees", "Other Transaction Fees", "Miscellaneous", "Total Amount", "Transaction Revenues1", "Collected VAT1", "Shipping Credits1", "Tax on Shipping Credits1", "Gift Wrap Credits1", "Tax on Gift Wrap Credits1", "Promotion Discounts1", "Tax on Promotion Discounts1", "Withheld Marketplace Tax1", "Sales Fees1", "Fulfillment Fees1", "Other Transaction Fees1", "Miscellaneous1", "Total Amount1"}),
				    #"Added Custom1" = Table.AddColumn(#"Reordered Columns3", "SKU Final", each if Text.Length([SKU1]) = 7 then [SKU1] else null),
				    #"Reordered Columns4" = Table.ReorderColumns(#"Added Custom1",{"Transaction Date/Time", "Date", "Invoice Number", "Transaction Type", "Order ID", "Product SKU", "SKU", "SKU1", "SKU Final", "ASIN", "Product Description", "Quantity Sold", "Transaction Marketplace", "Shipping Cost", "Order Location", "State", "Postal Code", "Tax Collection Model", "Gift Wrap Credits", "Tax on Gift Wrap Credits", "Promotion Discounts", "Tax on Promotion Discounts", "Withheld Marketplace Tax", "Sales Fees", "Fulfillment Fees", "Other Transaction Fees", "Miscellaneous", "Total Amount", "Transaction Revenues1", "Collected VAT1", "Shipping Credits1", "Tax on Shipping Credits1", "Gift Wrap Credits1", "Tax on Gift Wrap Credits1", "Promotion Discounts1", "Tax on Promotion Discounts1", "Withheld Marketplace Tax1", "Sales Fees1", "Fulfillment Fees1", "Other Transaction Fees1", "Miscellaneous1", "Total Amount1"}),
				    #"Renamed Columns" = Table.RenameColumns(#"Reordered Columns4",{{"SKU Final", "SKU sale"}}),
				    #"Removed Columns1" = Table.RemoveColumns(#"Renamed Columns",{"SKU1", "SKU"}),
				    #"Added Conditional Column1" = Table.AddColumn(#"Removed Columns1", "SKU Combined", each if [SKU sale] <> null then [SKU sale] else if [SKU based on ASIN] <> null then [SKU based on ASIN] else "null", type text),
				    #"Reordered Columns6" = Table.ReorderColumns(#"Added Conditional Column1",{"Transaction Date/Time", "Date", "Invoice Number", "Transaction Type", "Order ID", "Product SKU", "SKU sale", "ASIN",  "SKU Combined", "Product Description", "Quantity Sold", "Transaction Marketplace", "Shipping Cost", "Order Location", "State", "Postal Code", "Tax Collection Model", "Gift Wrap Credits", "Tax on Gift Wrap Credits", "Promotion Discounts", "Tax on Promotion Discounts", "Withheld Marketplace Tax", "Sales Fees", "Fulfillment Fees", "Other Transaction Fees", "Miscellaneous", "Total Amount", "Transaction Revenues1", "Collected VAT1", "Shipping Credits1", "Tax on Shipping Credits1", "Gift Wrap Credits1", "Tax on Gift Wrap Credits1", "Promotion Discounts1", "Tax on Promotion Discounts1", "Withheld Marketplace Tax1", "Sales Fees1", "Fulfillment Fees1", "Other Transaction Fees1", "Miscellaneous1", "Total Amount1"}),
				    #"Replaced Value" = Table.ReplaceValue(#"Reordered Columns6","Bestellung","Order",Replacer.ReplaceText,{"Transaction Type"}),
				    #"Replaced Value1" = Table.ReplaceValue(#"Replaced Value","Servicegebühr","Service fee",Replacer.ReplaceText,{"Transaction Type"}),
				    #"Replaced Value2" = Table.ReplaceValue(#"Replaced Value1","Erstattung","Refund",Replacer.ReplaceText,{"Transaction Type"}),
				    #"Replaced Value3" = Table.ReplaceValue(#"Replaced Value2","Anpassung","Adjustment",Replacer.ReplaceText,{"Transaction Type"}),
				    #"Replaced Value4" = Table.ReplaceValue(#"Replaced Value3","Liquidationen","Liquidations",Replacer.ReplaceText,{"Transaction Type"}),
				    #"Replaced Value5" = Table.ReplaceValue(#"Replaced Value4","Versand durch Amazon Lagergebühr","Shipping by amazon storage fee",Replacer.ReplaceText,{"Transaction Type"}),
				    #"Replaced Value6" = Table.ReplaceValue(#"Replaced Value5","Übertrag","Transfer",Replacer.ReplaceText,{"Transaction Type"}),
				    #"Replaced Value7" = Table.ReplaceValue(#"Replaced Value6","Order_Wiedereinzug","Order Return",Replacer.ReplaceText,{"Transaction Type"}),
				    #"Replaced Value9" = Table.ReplaceValue(#"Replaced Value7","Gebührenerstattung","Fee Reimbursement",Replacer.ReplaceText,{"Transaction Type"}),
				    #"Replaced Value8" = Table.ReplaceValue(#"Replaced Value9","Refund_Wiedereinzug","Refund Collection",Replacer.ReplaceText,{"Transaction Type"}),
				    #"Added Custom2" = Table.AddColumn(#"Replaced Value8", "%VAT", each if [Transaction Revenues1] = 0 then 0 else [Collected VAT1]*100/[Transaction Revenues1]),
				    #"Changed Type5" = Table.TransformColumnTypes(#"Added Custom2",{{"%VAT", Int64.Type}}),
				    #"Replaced Errors" = Table.ReplaceErrorValues(#"Changed Type5", {{"%VAT", null}}),
				    #"Reordered Columns7" = Table.ReorderColumns(#"Replaced Errors",{"Transaction Date/Time", "Date", "Invoice Number", "Transaction Type", "Order ID", "Product SKU", "SKU sale", "ASIN",  "SKU Combined", "Product Description", "Quantity Sold", "Transaction Marketplace", "Shipping Cost", "Order Location", "State", "Postal Code", "Tax Collection Model", "%VAT", "Gift Wrap Credits", "Tax on Gift Wrap Credits", "Promotion Discounts", "Tax on Promotion Discounts", "Withheld Marketplace Tax", "Sales Fees", "Fulfillment Fees", "Other Transaction Fees", "Miscellaneous", "Total Amount", "Transaction Revenues1", "Collected VAT1", "Shipping Credits1", "Tax on Shipping Credits1", "Gift Wrap Credits1", "Tax on Gift Wrap Credits1", "Promotion Discounts1", "Tax on Promotion Discounts1", "Withheld Marketplace Tax1", "Sales Fees1", "Fulfillment Fees1", "Other Transaction Fees1", "Miscellaneous1", "Total Amount1"}),
				    #"Removed Columns2" = Table.RemoveColumns(#"Reordered Columns7",{"Gift Wrap Credits", "Tax on Gift Wrap Credits", "Promotion Discounts", "Tax on Promotion Discounts", "Withheld Marketplace Tax", "Sales Fees", "Fulfillment Fees", "Other Transaction Fees", "Miscellaneous", "Total Amount"}),
				    #"Renamed Columns2" = Table.RenameColumns(#"Removed Columns2",{{"Sales Fees1", "Sales Fees1(Transport)"}, {"Other Transaction Fees1", "Other Transaction Fees1(Marketing)"}, {"Miscellaneous1", "Miscellaneous1 (Withdrawals)"}}),
				    #"Added Custom3" = Table.AddColumn(#"Renamed Columns2", "Sales fees(Transport+Fulfillment)", each [#"Sales Fees1(Transport)"]+[Fulfillment Fees1]),
				    #"Reordered Columns8" = Table.ReorderColumns(#"Added Custom3",{"Transaction Date/Time", "Date", "Invoice Number", "Transaction Type", "Order ID", "Product SKU", "SKU sale", "ASIN",  "SKU Combined", "Product Description", "Quantity Sold", "Transaction Marketplace", "Shipping Cost", "Order Location", "State", "Postal Code", "Tax Collection Model", "%VAT", "Transaction Revenues1", "Collected VAT1", "Shipping Credits1", "Tax on Shipping Credits1", "Gift Wrap Credits1", "Tax on Gift Wrap Credits1", "Promotion Discounts1", "Tax on Promotion Discounts1", "Withheld Marketplace Tax1", "Sales Fees1(Transport)", "Fulfillment Fees1", "Sales fees(Transport+Fulfillment)", "Other Transaction Fees1(Marketing)", "Miscellaneous1 (Withdrawals)", "Total Amount1"}),
				    #"Changed Type6" = Table.TransformColumnTypes(#"Reordered Columns8",{{"Sales fees(Transport+Fulfillment)", type number}}),
				    #"Removed Columns3" = Table.RemoveColumns(#"Changed Type6",{"SKU Combined"}),
				    #"Replaced Value10" = Table.ReplaceValue(#"Removed Columns3","21306-10-SM","M-21306-10-SM",Replacer.ReplaceText,{"Product SKU"}),
				    #"Replaced Value11" = Table.ReplaceValue(#"Replaced Value10","21306-10-LXL","M-21306-10-LXL",Replacer.ReplaceText,{"Product SKU"}),
				    #"Replaced Value12" = Table.ReplaceValue(#"Replaced Value11","MM-21306-10-SM","M-21306-10-SM",Replacer.ReplaceText,{"Product SKU"}),
				    #"Replaced Value13" = Table.ReplaceValue(#"Replaced Value12","MM-21306-10-LXL","M-21306-10-LXL",Replacer.ReplaceText,{"Product SKU"}),
				    #"Removed Columns4" = Table.RemoveColumns(#"Replaced Value13",{"SKU sale"}),
				    #"Merged Queries" = Table.NestedJoin(#"Removed Columns4", {"ASIN"}, #"Item translator", {"ASIN"}, "Item translator", JoinKind.LeftOuter),
				    #"Expanded Item translator" = Table.ExpandTableColumn(#"Merged Queries", "Item translator", {"Amazon"}, {"Item translator.Amazon"}),
				    #"Reordered Columns5" = Table.ReorderColumns(#"Expanded Item translator",{"Transaction Date/Time", "Date", "Invoice Number", "Transaction Type", "Order ID", "Product SKU", "ASIN", "Item translator.Amazon", "Product Description", "Quantity Sold", "Transaction Marketplace", "Shipping Cost", "Order Location", "State", "Postal Code", "Tax Collection Model", "%VAT", "Transaction Revenues1", "Collected VAT1", "Shipping Credits1", "Tax on Shipping Credits1", "Gift Wrap Credits1", "Tax on Gift Wrap Credits1", "Promotion Discounts1", "Tax on Promotion Discounts1", "Withheld Marketplace Tax1", "Sales Fees1(Transport)", "Fulfillment Fees1", "Sales fees(Transport+Fulfillment)", "Other Transaction Fees1(Marketing)", "Miscellaneous1 (Withdrawals)", "Total Amount1"}),
				    #"Added Custom4" = Table.AddColumn(#"Reordered Columns5", "Product SKU final", each if Text.Start([Product SKU],1) = "M" then [Product SKU] else if Text.Start([Product SKU],1) = "B" then [Item translator.Amazon] else null),
				    #"Reordered Columns9" = Table.ReorderColumns(#"Added Custom4",{"Transaction Date/Time", "Date", "Invoice Number", "Transaction Type", "Order ID", "Product SKU", "Product SKU final", "ASIN", "Item translator.Amazon", "Product Description", "Quantity Sold", "Transaction Marketplace", "Shipping Cost", "Order Location", "State", "Postal Code", "Tax Collection Model", "%VAT", "Transaction Revenues1", "Collected VAT1", "Shipping Credits1", "Tax on Shipping Credits1", "Gift Wrap Credits1", "Tax on Gift Wrap Credits1", "Promotion Discounts1", "Tax on Promotion Discounts1", "Withheld Marketplace Tax1", "Sales Fees1(Transport)", "Fulfillment Fees1", "Sales fees(Transport+Fulfillment)", "Other Transaction Fees1(Marketing)", "Miscellaneous1 (Withdrawals)", "Total Amount1"}),
				    #"Added Custom5" = Table.AddColumn(#"Reordered Columns9", "Parent SKU", each Text.Start([Product SKU final],7)),
				    #"Reordered Columns10" = Table.ReorderColumns(#"Added Custom5",{"Transaction Date/Time", "Date", "Invoice Number", "Transaction Type", "Order ID", "Product SKU", "Product SKU final", "ASIN", "Item translator.Amazon", "Parent SKU", "Product Description", "Quantity Sold", "Transaction Marketplace", "Shipping Cost", "Order Location", "State", "Postal Code", "Tax Collection Model", "%VAT", "Transaction Revenues1", "Collected VAT1", "Shipping Credits1", "Tax on Shipping Credits1", "Gift Wrap Credits1", "Tax on Gift Wrap Credits1", "Promotion Discounts1", "Tax on Promotion Discounts1", "Withheld Marketplace Tax1", "Sales Fees1(Transport)", "Fulfillment Fees1", "Sales fees(Transport+Fulfillment)", "Other Transaction Fees1(Marketing)", "Miscellaneous1 (Withdrawals)", "Total Amount1"}),
				    #"Replaced Value26" = Table.ReplaceValue(#"Reordered Columns10","Amazon.de","amazon.de",Replacer.ReplaceText,{"Transaction Marketplace"}),
				    #"Replaced Value27" = Table.ReplaceValue(#"Replaced Value26","si-prod-marketplace-de.stores.amazon.de","WebShop",Replacer.ReplaceText,{"Transaction Marketplace"}),
				    #"Added Index" = Table.AddIndexColumn(#"Replaced Value27", "Index", 1, 1, Int64.Type),
				    #"Reordered Columns11" = Table.ReorderColumns(#"Added Index",{"Index", "Transaction Date/Time", "Date", "Invoice Number", "Transaction Type", "Order ID", "Product SKU", "Product SKU final", "ASIN", "Item translator.Amazon", "Parent SKU", "Product Description", "Quantity Sold", "Transaction Marketplace", "Shipping Cost", "Order Location", "State", "Postal Code", "Tax Collection Model", "%VAT", "Transaction Revenues1", "Collected VAT1", "Shipping Credits1", "Tax on Shipping Credits1", "Gift Wrap Credits1", "Tax on Gift Wrap Credits1", "Promotion Discounts1", "Tax on Promotion Discounts1", "Withheld Marketplace Tax1", "Sales Fees1(Transport)", "Fulfillment Fees1", "Sales fees(Transport+Fulfillment)", "Other Transaction Fees1(Marketing)", "Miscellaneous1 (Withdrawals)", "Total Amount1"}),
				    #"Replaced Value28" = Table.ReplaceValue(#"Reordered Columns11","M-21136-10-35/38","M-211360001",Replacer.ReplaceText,{"Product SKU final"}),
				    #"Replaced Value29" = Table.ReplaceValue(#"Replaced Value28","M-21136-10-39/42","M-211360002",Replacer.ReplaceText,{"Product SKU final"}),
				    #"Replaced Value30" = Table.ReplaceValue(#"Replaced Value29","M-21136-10-43/46","M-211360003",Replacer.ReplaceText,{"Product SKU final"}),
				    #"Replaced Value31" = Table.ReplaceValue(#"Replaced Value30","M-21136-10-47/49","M-211360004",Replacer.ReplaceText,{"Product SKU final"}),
				    #"Replaced Value32" = Table.ReplaceValue(#"Replaced Value31","M-21136-11-39/42-Blau","M-21165-11-39/42-Blau",Replacer.ReplaceText,{"Product SKU final"}),
				    #"Replaced Value33" = Table.ReplaceValue(#"Replaced Value32","M-21136-11-43/46-Blau","M-21165-11-43/46-Blau",Replacer.ReplaceText,{"Product SKU final"}),
				    #"Replaced Value34" = Table.ReplaceValue(#"Replaced Value33","M-21136-11-47/49-Blau","M-21165-11-47/49-Blau",Replacer.ReplaceText,{"Product SKU final"}),
				    #"Replaced Value35" = Table.ReplaceValue(#"Replaced Value34","","amazon.de",Replacer.ReplaceValue,{"Transaction Marketplace"})
				in
				    #"Replaced Value35"
				```

	annotation PBI_ResultType = Table

	annotation PBI_NavigationStepName = Navigation

